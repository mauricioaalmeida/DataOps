version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ds-network

  # PgAdmin for PostgreSQL administration
  pgadmin:
    image: dpage/pgadmin4:8
    env_file:
      - .env
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ds-network

  # Apache Airflow
  airflow:
    image: apache/airflow:2.10.2
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - ./airflow_logs:/opt/airflow/logs
      - ./airflow_plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "airflow db init && 
               airflow users create --username admin --password $AIRFLOW_ADMIN_PASSWORD --firstname Admin --lastname User --role Admin --email admin@example.com && 
               airflow webserver"
    networks:
      - ds-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    ports:
      - "7077:7077"
      - "8081:8080"
    volumes:
      - ./spark_data:/opt/bitnami/spark/data
    networks:
      - ds-network

  # Spark History Server
  spark-history:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=history
      - SPARK_HISTORY_OPTS="-Dspark.history.fs.logDirectory=/opt/bitnami/spark/logs"
    ports:
      - "18080:18080"
    volumes:
      - ./spark_logs:/opt/bitnami/spark/logs
    depends_on:
      - spark-master
    networks:
      - ds-network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark_data:/opt/bitnami/spark/data
    depends_on:
      - spark-master
    networks:
      - ds-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.7.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9092:9092"
    volumes:
      - ./kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - ds-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - ./zookeeper_data:/var/lib/zookeeper/data
    networks:
      - ds-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8082:8080"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - ds-network

  # Jupyter Notebook with Python and R
  jupyter:
    image: jupyter/datascience-notebook:latest
    env_file:
      - .env
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./scripts:/home/jovyan/scripts
    networks:
      - ds-network

volumes:
  postgres_data:
  pgadmin_data:
  airflow_dags:
  airflow_logs:
  airflow_plugins:
  spark_data:
  spark_logs:
  kafka_data:
  zookeeper_data:
  notebooks:
  scripts:

networks:
  ds-network:
    driver: bridge